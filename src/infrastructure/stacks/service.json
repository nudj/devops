{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "EC2 Container Service [07-create-]",
  "Parameters": {
    "VPCStackName": {
      "Description": "The name of the target VPC stack to deploy this ELB into",
      "Type": "String"
    },
    "ServiceName": {
      "Description": "The name of the ECS Service to create",
      "Type": "String"
    },
    "ContainerPort": {
      "Description": "The port to allocate for this container",
      "Type": "Number"
    },
    "ImageUrl": {
      "Description": "The url of a docker image that contains the application process that will handle the traffic for this service",
      "Type": "String"
    },
    "ContainerCpu": {
      "Description": "How much CPU to give the container. 1024 is 1 CPU",
      "Type": "Number"
    },
    "ContainerMemory": {
      "Description": "How much memory in megabytes to give the container",
      "Type": "Number"
    },
    "DesiredCount": {
      "Description": "How many instances of this service do you want to launch",
      "Type": "Number"
    },
    "ListenerRuleType": {
      "Description": "The type of listener rule to apply",
      "Type": "String",
      "Default": "host-header"
    },
    "ListenerRuleValue": {
      "Description": "The value of listener rule to apply",
      "Type": "String"
    },
    "ListenerRulePriority": {
      "Description": "The priority of listener rule to apply",
      "Type": "Number"
    },
    "HealthPing": {
      "Description": "Healthcheck URL",
      "Type": "String"
    },
    "EnvironmentType": {
      "Description": "Name of the environment to build : demo, development, staging performance or production",
      "Type": "String",
      "Default": "prod",
      "AllowedValues": [
        "staging", "prod", "test", "demo"
      ]
    }
  },
  "Mappings" : {
    "ENVKEYMAP" : {
      "web"      : { "key": "4weQYHg9XoJjmaacrfjS-34Ag12pCR3AqwVdd" },
      "hire"     : { "key": "BUkgivC5zAf9JN5dG3Vm-gZBxLGDj3bWjbVyE" },
      "admin"    : { "key": "KUtm1pXw7jxryEGeG6Z5-4WQpvSdwFv2xQXZk" },
      "api"      : { "key": "ksx5VJuYXRvagxPDkz73-4vtFfofgvZysFepN" },
      "node-ecr-test": { "key": "foofoo" }
    }
  },
  "Resources": {
    "CloudwatchLogsGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Join": [
            "-",
            [
              "ECSLogGroup",
              {
                "Ref": "AWS::StackName"
              }
            ]
          ]
        },
        "RetentionInDays": 14
      }
    },
    "ContainerTask": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "Family" : {"Fn::Sub" : "${VPCStackName}-${EnvironmentType}-${ServiceName}"},
        "Cpu": { "Ref": "ContainerCpu" },
        "Memory": { "Ref": "ContainerMemory" },
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [ "FARGATE" ],
        "ExecutionRoleArn": {"Fn::ImportValue" : {"Fn::Sub" : "${VPCStackName}-${EnvironmentType}-ECSTaskExecutionRoleArn"}},
        "ContainerDefinitions": [
          {
            "Name": {"Fn::Sub" : "${ServiceName}-${EnvironmentType}"},
            "Cpu": { "Ref": "ContainerCpu" },
            "Memory": { "Ref": "ContainerMemory" },
            "Image": { "Ref": "ImageUrl" },
            "PortMappings": [
              {
                "ContainerPort": { "Ref": "ContainerPort" }
              }
            ],
            "Environment": [
              {
                "Name": "ENVKEY",
                "Value": { "Fn::FindInMap": [ "ENVKEYMAP", { "Ref": "ServiceName"}, "key" ]}
              }
            ],
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "CloudwatchLogsGroup"
                },
                "awslogs-region": {
                  "Ref": "AWS::Region"
                },
                "awslogs-stream-prefix": "ecs-content"
              }
            },
          }
        ]
      }
    },
    "TaskSecurityGroup": {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties": {
            "GroupDescription": "TaskSecurityGroup",
            "SecurityGroupEgress": [
                {
                    "CidrIp": "0.0.0.0/0",
                    "FromPort": -1,
                    "IpProtocol": "-1",
                    "ToPort": -1
                }
            ],
            "SecurityGroupIngress": [
                {
                    "SourceSecurityGroupId": {"Fn::ImportValue" : {"Fn::Sub" : "${VPCStackName}-${EnvironmentType}-ELBSecurityGroupID"}},
                    "FromPort": { "Ref": "ContainerPort" },
                    "IpProtocol": "6",
                    "ToPort": { "Ref": "ContainerPort" }
                }
            ],
            "VpcId": {"Fn::ImportValue" : {"Fn::Sub" : "${VPCStackName}-VPCID"}},
            "Tags": [
                {
                    "Key": "Name",
                    "Value": { "Fn::Join": ["-", ["sg-task", { "Ref": "EnvironmentType" } ]] }
                }
            ]
        }
    },
    "ContainerService": {
      "Type": "AWS::ECS::Service",
      "Properties" : {
        "ServiceName" : {"Fn::Sub" : "${ServiceName}-${EnvironmentType}"},
        "Cluster": {"Fn::Sub" : "${VPCStackName}-${EnvironmentType}"},
        "LaunchType": "FARGATE",
        "DeploymentConfiguration": {
          "MaximumPercent": "200",
          "MinimumHealthyPercent": "75"
        },
        "DesiredCount": { "Ref": "DesiredCount" },
        "NetworkConfiguration": {
          "AwsvpcConfiguration": {
            "AssignPublicIp": "ENABLED",
            "SecurityGroups": [ { "Ref": "TaskSecurityGroup"} ],
            "Subnets" : [ {"Fn::ImportValue" : {"Fn::Sub" : "${VPCStackName}-PublicSubnet1ID"}}, {"Fn::ImportValue" : {"Fn::Sub" : "${VPCStackName}-PublicSubnet2ID"}} ]
          }
        },
        "TaskDefinition": { "Ref": "ContainerTask" },
        "LoadBalancers": [
          {
            "ContainerName": { "Fn::Join": ["-", [{ "Ref": "ServiceName" }, { "Ref": "EnvironmentType" } ]] },
            "ContainerPort": { "Ref": "ContainerPort" },
            "TargetGroupArn": { "Ref": "ServiceTargetGroup" }
          }
        ]
      }
    },
    "ServiceTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "HealthCheckIntervalSeconds": 30,
        "HealthCheckPath": "/healthcheck",
        "HealthCheckProtocol": "HTTP",
        "HealthCheckTimeoutSeconds": 10,
        "HealthyThresholdCount": 2,
        "TargetType": "ip",
        "Name": {"Fn::Sub" : "${ServiceName}-${EnvironmentType}"},
        "Port": { "Ref": "ContainerPort" },
        "Protocol": "HTTP",
        "UnhealthyThresholdCount": 10,
        "VpcId": {"Fn::ImportValue" : {"Fn::Sub" : "${VPCStackName}-VPCID"}}
      }
    },
    "ServiceLoadBalancerRule": {
      "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
      "Properties": {
        "Actions": [
          {
            "TargetGroupArn": { "Ref": "ServiceTargetGroup" },
            "Type": "forward"
          }
        ],
        "Conditions": [
          {
            "Field": { "Ref": "ListenerRuleType"},
            "Values": [
              { "Ref": "ListenerRuleValue"}
            ]
          }
        ],
        "Priority": { "Ref": "ListenerRulePriority"},
        "ListenerArn": {"Fn::ImportValue" : {"Fn::Sub" : "${VPCStackName}-${EnvironmentType}-WebALBHttspListener"}}
      }
    }
  }
}
